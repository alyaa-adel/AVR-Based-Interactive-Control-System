
codewithoutdriverss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000865  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000702  00000000  00000000  00000b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000349  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a3  00000000  00000000  00001a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  9e:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_GPIO>:
#define BUTTON1_PIN PD2 // Define pin for first button
#define BUTTON2_PIN PD3 // Define pin for second button
#define LED_COUNT 4 // Number of LEDs
void init_GPIO() {
	// Set LED ports as outputs
	DDRC = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 b9       	out	0x07, r24	; 7
	// Set 7-segment display port as output
	DDRB = 0xFF;
  aa:	84 b9       	out	0x04, r24	; 4
	// Set button ports as inputs with pull-up resistors enabled
	DDRD &= ~((1 << BUTTON1_PIN) | (1 << BUTTON2_PIN));
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	83 7f       	andi	r24, 0xF3	; 243
  b0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << BUTTON1_PIN) | (1 << BUTTON2_PIN);
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8c 60       	ori	r24, 0x0C	; 12
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	08 95       	ret

000000ba <rotate_LEDs>:
}
void rotate_LEDs() {
	static uint8_t led_position = 0;
	LED_PORT = (1 << led_position);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	00 90 0a 01 	lds	r0, 0x010A	; 0x80010a <__data_end>
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <rotate_LEDs+0xe>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <rotate_LEDs+0xa>
  cc:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	87 ea       	ldi	r24, 0xA7	; 167
  d0:	91 e6       	ldi	r25, 0x61	; 97
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <rotate_LEDs+0x18>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <rotate_LEDs+0x1e>
  d8:	00 00       	nop
	_delay_ms(100);
	led_position++;
  da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	if (led_position >= LED_COUNT) {
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	10 f0       	brcs	.+4      	; 0xec <rotate_LEDs+0x32>
		led_position = 0;
  e8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
  ec:	08 95       	ret

000000ee <increment_display>:
	}
}
void increment_display() {
	PORTB=sevensegment[segment_index];
  ee:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <segment_index>
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	85 b9       	out	0x05, r24	; 5
	segment_index++;
  fc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <segment_index>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <segment_index>
	if(segment_index==10 )
 106:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <segment_index>
 10a:	8a 30       	cpi	r24, 0x0A	; 10
 10c:	11 f4       	brne	.+4      	; 0x112 <increment_display+0x24>
	{
		segment_index=0;
 10e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <segment_index>
 112:	08 95       	ret

00000114 <interrupt_on>:
	}
}
void interrupt_on()
{
	PCMSK2|=(1<<PCINT18);  // mintor pd2
 114:	ed e6       	ldi	r30, 0x6D	; 109
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	80 83       	st	Z, r24
	PCMSK2|=(1<<PCINT19);   //mintor pd3
 11e:	80 81       	ld	r24, Z
 120:	88 60       	ori	r24, 0x08	; 8
 122:	80 83       	st	Z, r24
	PCICR |= (1<< PCIE2); //enable port d
 124:	e8 e6       	ldi	r30, 0x68	; 104
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	80 83       	st	Z, r24
	sei(); // global interrupt
 12e:	78 94       	sei
 130:	08 95       	ret

00000132 <main>:
}
int main()
{
	init_GPIO();
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <init_GPIO>
	interrupt_on();
 136:	0e 94 8a 00 	call	0x114	; 0x114 <interrupt_on>
 13a:	ff cf       	rjmp	.-2      	; 0x13a <main+0x8>

0000013c <__vector_5>:
		
	}
	
}
ISR(PCINT2_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	// Check button is pressed
	if (!(BUTTON_PORT & (1 << BUTTON1_PIN))) {
 15e:	4a 99       	sbic	0x09, 2	; 9
 160:	0a c0       	rjmp	.+20     	; 0x176 <__vector_5+0x3a>
		
		rotate_LEDs();
 162:	0e 94 5d 00 	call	0xba	; 0xba <rotate_LEDs>
 166:	87 ea       	ldi	r24, 0xA7	; 167
 168:	91 e6       	ldi	r25, 0x61	; 97
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <__vector_5+0x2e>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <__vector_5+0x34>
 170:	00 00       	nop
		_delay_ms(100);
		while (!(BUTTON_PORT & (1 << BUTTON1_PIN)));
 172:	4a 9b       	sbis	0x09, 2	; 9
 174:	fe cf       	rjmp	.-4      	; 0x172 <__vector_5+0x36>
	}
	// Check second button is pressed
	if (!(BUTTON_PORT & (1 << BUTTON2_PIN))) {
 176:	4b 99       	sbic	0x09, 3	; 9
 178:	0a c0       	rjmp	.+20     	; 0x18e <__vector_5+0x52>
		
		increment_display();
 17a:	0e 94 77 00 	call	0xee	; 0xee <increment_display>
 17e:	87 ea       	ldi	r24, 0xA7	; 167
 180:	91 e6       	ldi	r25, 0x61	; 97
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <__vector_5+0x46>
 186:	00 c0       	rjmp	.+0      	; 0x188 <__vector_5+0x4c>
 188:	00 00       	nop
		_delay_ms(100);
		while (!(BUTTON_PORT & (1 << BUTTON2_PIN)));
 18a:	4b 9b       	sbis	0x09, 3	; 9
 18c:	fe cf       	rjmp	.-4      	; 0x18a <__vector_5+0x4e>
	}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
