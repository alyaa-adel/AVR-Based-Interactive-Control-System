
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000003ca  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f11  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f4  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000805  00000000  00000000  00001ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000026e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000370  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  9e:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LED_Init>:
	0b00001000,
};

void LED_Init(void)
{	
	DIO_SetPortDirection(LED_DDR,Output);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPortDirection>
  ae:	08 95       	ret

000000b0 <ROTATE_LEDS>:
}

void ROTATE_LEDS(void)
{
	static uint8 led_index = 0;
	DIO_SetPortValue(LED_PORT,LEDS[led_index]);
  b0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	e6 5f       	subi	r30, 0xF6	; 246
  b8:	fe 4f       	sbci	r31, 0xFE	; 254
  ba:	60 81       	ld	r22, Z
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 12 01 	call	0x224	; 0x224 <DIO_SetPortValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	87 ea       	ldi	r24, 0xA7	; 167
  c4:	91 e6       	ldi	r25, 0x61	; 97
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <ROTATE_LEDS+0x16>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <ROTATE_LEDS+0x1c>
  cc:	00 00       	nop
	_delay_ms(100);
	led_index++;
  ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	if(led_index==4)
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	11 f4       	brne	.+4      	; 0xe0 <ROTATE_LEDS+0x30>
	{
		led_index=0;
  dc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
  e0:	08 95       	ret

000000e2 <PUSH_BUTTON_INIT>:
#include "../../MCAL/DIO/DIO.h"
#include "P_B.h"

void PUSH_BUTTON_INIT(void)
{
	DIO_SetPinDirection(BUTTON_DDR,BUTTON1_PIN,Input);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinDirection(BUTTON_DDR,BUTTON2_PIN,Input);
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinDirection>
	DIO_SetPinValue(BUTTON_PORT,BUTTON1_PIN,HIGH);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_SetPinValue>
	DIO_SetPinValue(BUTTON_PORT,BUTTON1_PIN,HIGH);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_SetPinValue>
 10a:	08 95       	ret

0000010c <SEV_SEG_INIT>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO.h"

void SEV_SEG_INIT(void)
{
	DIO_SetPortDirection(SEV_SEG_DDR,Output);		
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPortDirection>
 114:	08 95       	ret

00000116 <SEV_SEG_DISPLAY>:
}
void SEV_SEG_DISPLAY(void)
{	
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	2a 97       	sbiw	r28, 0x0a	; 10
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
	static uint8 digit = 0;
	const uint8 sevensegment[] =
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	e0 e0       	ldi	r30, 0x00	; 0
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	de 01       	movw	r26, r28
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <SEV_SEG_DISPLAY+0x1e>
		0b00000111,  // 7
		0b01111111,  // 8
		0b01101111   // 9
	};
	
	DIO_SetPortValue(SEV_SEG_PORT,sevensegment[digit]);
 13c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <digit.1624>
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	e8 0f       	add	r30, r24
 14a:	f1 1d       	adc	r31, r1
 14c:	60 81       	ld	r22, Z
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 12 01 	call	0x224	; 0x224 <DIO_SetPortValue>
	digit++;
 154:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <digit.1624>
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <digit.1624>
	
	if(digit==10)
 15e:	8a 30       	cpi	r24, 0x0A	; 10
 160:	11 f4       	brne	.+4      	; 0x166 <SEV_SEG_DISPLAY+0x50>
	{
		digit=0;
 162:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <digit.1624>
	}
	
 166:	2a 96       	adiw	r28, 0x0a	; 10
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <main>:
#include "HAL/P_B/P_B.h"
#include <util/delay.h>
// in main.c we just call the functions that we made in Hal
int main(void)
{
		LED_Init();
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <LED_Init>
		SEV_SEG_INIT();
 17c:	0e 94 86 00 	call	0x10c	; 0x10c <SEV_SEG_INIT>
		PUSH_BUTTON_INIT();
 180:	0e 94 71 00 	call	0xe2	; 0xe2 <PUSH_BUTTON_INIT>
		INTERRUPT_INIT();
 184:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <INTERRUPT_INIT>
 188:	ff cf       	rjmp	.-2      	; 0x188 <main+0x10>

0000018a <__vector_5>:
			
		}
}
//isz must be up or down the int main 
ISR(PCINT2_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	if (!(BUTTON_PD2_IS_PRESSED))
 1ac:	4a 99       	sbic	0x09, 2	; 9
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <__vector_5+0x2e>
	{
		ROTATE_LEDS();
 1b0:	0e 94 58 00 	call	0xb0	; 0xb0 <ROTATE_LEDS>
		while(!(BUTTON_PD2_IS_PRESSED));
 1b4:	4a 9b       	sbis	0x09, 2	; 9
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <__vector_5+0x2a>
	}
	
	if(!(BUTTON_PD3_IS_PRESSED))
 1b8:	4b 99       	sbic	0x09, 3	; 9
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <__vector_5+0x3a>
	{
		SEV_SEG_DISPLAY();
 1bc:	0e 94 8b 00 	call	0x116	; 0x116 <SEV_SEG_DISPLAY>
		while(!(BUTTON_PD3_IS_PRESSED));
 1c0:	4b 9b       	sbis	0x09, 3	; 9
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <__vector_5+0x36>
	}
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <DIO_SetPortDirection>:

#include "DIO.h"

void DIO_SetPortDirection(DIO_PORT_ID port_ID,DIO_Direction direction)
{
	if(Output == direction)
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	79 f4       	brne	.+30     	; 0x208 <DIO_SetPortDirection+0x22>
	{
		switch(port_ID)
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	39 f0       	breq	.+14     	; 0x1fc <DIO_SetPortDirection+0x16>
 1ee:	18 f0       	brcs	.+6      	; 0x1f6 <DIO_SetPortDirection+0x10>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	39 f0       	breq	.+14     	; 0x202 <DIO_SetPortDirection+0x1c>
 1f4:	08 95       	ret
		{
			case PORT_B: DDRB_REG = 0xFF ; break;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	84 b9       	out	0x04, r24	; 4
 1fa:	08 95       	ret
			case PORT_C: DDRC_REG = 0xFF ; break;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	87 b9       	out	0x07, r24	; 7
 200:	08 95       	ret
			case PORT_D: DDRD_REG = 0xFF ; break;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	8a b9       	out	0x0a, r24	; 10
 206:	08 95       	ret
		}
	}
	else if( Input == direction )
 208:	61 11       	cpse	r22, r1
 20a:	0b c0       	rjmp	.+22     	; 0x222 <DIO_SetPortDirection+0x3c>
	{
		switch(port_ID)
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	31 f0       	breq	.+12     	; 0x21c <DIO_SetPortDirection+0x36>
 210:	18 f0       	brcs	.+6      	; 0x218 <DIO_SetPortDirection+0x32>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	29 f0       	breq	.+10     	; 0x220 <DIO_SetPortDirection+0x3a>
 216:	08 95       	ret
		{
			case PORT_B:  DDRB_REG = 0x00 ; break;
 218:	14 b8       	out	0x04, r1	; 4
 21a:	08 95       	ret
			case PORT_C:  DDRC_REG = 0x00 ; break;
 21c:	17 b8       	out	0x07, r1	; 7
 21e:	08 95       	ret
			case PORT_D:  DDRD_REG = 0x00 ; break;
 220:	1a b8       	out	0x0a, r1	; 10
 222:	08 95       	ret

00000224 <DIO_SetPortValue>:
	}
}

void DIO_SetPortValue(DIO_PORT_ID port_ID,uint8 value)
{
	switch(port_ID)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	31 f0       	breq	.+12     	; 0x234 <DIO_SetPortValue+0x10>
 228:	18 f0       	brcs	.+6      	; 0x230 <DIO_SetPortValue+0xc>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	29 f0       	breq	.+10     	; 0x238 <DIO_SetPortValue+0x14>
 22e:	08 95       	ret
	{
		case PORT_B: PORTB_REG = value ; break;
 230:	65 b9       	out	0x05, r22	; 5
 232:	08 95       	ret
		case PORT_C: PORTC_REG = value ; break;
 234:	68 b9       	out	0x08, r22	; 8
 236:	08 95       	ret
		case PORT_D: PORTD_REG = value ; break;
 238:	6b b9       	out	0x0b, r22	; 11
 23a:	08 95       	ret

0000023c <DIO_SetPinDirection>:
	}
}

void DIO_SetPinDirection(DIO_PORT_ID port_ID,DIO_PIN_ID pin_ID,DIO_Direction direction)
{
	if(port_ID <= PORT_D && pin_ID <= Pin7)
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	08 f0       	brcs	.+2      	; 0x242 <DIO_SetPinDirection+0x6>
 240:	57 c0       	rjmp	.+174    	; 0x2f0 <DIO_SetPinDirection+0xb4>
 242:	68 30       	cpi	r22, 0x08	; 8
 244:	08 f0       	brcs	.+2      	; 0x248 <DIO_SetPinDirection+0xc>
 246:	54 c0       	rjmp	.+168    	; 0x2f0 <DIO_SetPinDirection+0xb4>
	{
		if( Output == direction)
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	39 f5       	brne	.+78     	; 0x29a <DIO_SetPinDirection+0x5e>
		{
			switch(port_ID)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	79 f0       	breq	.+30     	; 0x26e <DIO_SetPinDirection+0x32>
 250:	18 f0       	brcs	.+6      	; 0x258 <DIO_SetPinDirection+0x1c>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	b9 f0       	breq	.+46     	; 0x284 <DIO_SetPinDirection+0x48>
 256:	08 95       	ret
			{
				case PORT_B: SET_BIT(DDRB_REG,pin_ID) ; break;
 258:	24 b1       	in	r18, 0x04	; 4
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_SetPinDirection+0x28>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_SetPinDirection+0x24>
 268:	82 2b       	or	r24, r18
 26a:	84 b9       	out	0x04, r24	; 4
 26c:	08 95       	ret
				case PORT_C: SET_BIT(DDRC_REG,pin_ID) ; break;
 26e:	27 b1       	in	r18, 0x07	; 7
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_SetPinDirection+0x3e>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_SetPinDirection+0x3a>
 27e:	82 2b       	or	r24, r18
 280:	87 b9       	out	0x07, r24	; 7
 282:	08 95       	ret
				case PORT_D: SET_BIT(DDRD_REG,pin_ID) ; break;
 284:	2a b1       	in	r18, 0x0a	; 10
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinDirection+0x54>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinDirection+0x50>
 294:	82 2b       	or	r24, r18
 296:	8a b9       	out	0x0a, r24	; 10
 298:	08 95       	ret
			}
		}
		else if(Input == direction)
 29a:	41 11       	cpse	r20, r1
 29c:	29 c0       	rjmp	.+82     	; 0x2f0 <DIO_SetPinDirection+0xb4>
		{
			switch(port_ID)
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	81 f0       	breq	.+32     	; 0x2c2 <DIO_SetPinDirection+0x86>
 2a2:	18 f0       	brcs	.+6      	; 0x2aa <DIO_SetPinDirection+0x6e>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	c9 f0       	breq	.+50     	; 0x2da <DIO_SetPinDirection+0x9e>
 2a8:	08 95       	ret
			{
				case PORT_B: CLEAR_BIT(DDRB_REG,pin_ID) ; break;
 2aa:	24 b1       	in	r18, 0x04	; 4
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_SetPinDirection+0x7a>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_SetPinDirection+0x76>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	84 b9       	out	0x04, r24	; 4
 2c0:	08 95       	ret
				case PORT_C: CLEAR_BIT(DDRC_REG,pin_ID) ; break;
 2c2:	27 b1       	in	r18, 0x07	; 7
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_SetPinDirection+0x92>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_SetPinDirection+0x8e>
 2d2:	80 95       	com	r24
 2d4:	82 23       	and	r24, r18
 2d6:	87 b9       	out	0x07, r24	; 7
 2d8:	08 95       	ret
				case PORT_D: CLEAR_BIT(DDRD_REG,pin_ID) ; break;
 2da:	2a b1       	in	r18, 0x0a	; 10
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_SetPinDirection+0xaa>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_SetPinDirection+0xa6>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	8a b9       	out	0x0a, r24	; 10
 2f0:	08 95       	ret

000002f2 <DIO_SetPinValue>:
	}
}

void DIO_SetPinValue(DIO_PORT_ID port_ID,DIO_PIN_ID pin_ID,STD_levelType value)
{
	if(port_ID <= PORT_D && pin_ID <= Pin7)
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <DIO_SetPinValue+0x6>
 2f6:	57 c0       	rjmp	.+174    	; 0x3a6 <DIO_SetPinValue+0xb4>
 2f8:	68 30       	cpi	r22, 0x08	; 8
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <DIO_SetPinValue+0xc>
 2fc:	54 c0       	rjmp	.+168    	; 0x3a6 <DIO_SetPinValue+0xb4>
	{
		if(value == HIGH)
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	39 f5       	brne	.+78     	; 0x350 <DIO_SetPinValue+0x5e>
		{
			switch(port_ID)
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	79 f0       	breq	.+30     	; 0x324 <DIO_SetPinValue+0x32>
 306:	18 f0       	brcs	.+6      	; 0x30e <DIO_SetPinValue+0x1c>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	b9 f0       	breq	.+46     	; 0x33a <DIO_SetPinValue+0x48>
 30c:	08 95       	ret
			{
				case PORT_B: SET_BIT(PORTB_REG,pin_ID) ; break;
 30e:	25 b1       	in	r18, 0x05	; 5
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_SetPinValue+0x28>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_SetPinValue+0x24>
 31e:	82 2b       	or	r24, r18
 320:	85 b9       	out	0x05, r24	; 5
 322:	08 95       	ret
				case PORT_C: SET_BIT(PORTC_REG,pin_ID) ; break;
 324:	28 b1       	in	r18, 0x08	; 8
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_SetPinValue+0x3e>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_SetPinValue+0x3a>
 334:	82 2b       	or	r24, r18
 336:	88 b9       	out	0x08, r24	; 8
 338:	08 95       	ret
				case PORT_D: SET_BIT(PORTD_REG,pin_ID) ; break;
 33a:	2b b1       	in	r18, 0x0b	; 11
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPinValue+0x54>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPinValue+0x50>
 34a:	82 2b       	or	r24, r18
 34c:	8b b9       	out	0x0b, r24	; 11
 34e:	08 95       	ret
			}
		}
		else if(value == LOW )
 350:	41 11       	cpse	r20, r1
 352:	29 c0       	rjmp	.+82     	; 0x3a6 <DIO_SetPinValue+0xb4>
		{
			switch(port_ID)
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	81 f0       	breq	.+32     	; 0x378 <DIO_SetPinValue+0x86>
 358:	18 f0       	brcs	.+6      	; 0x360 <DIO_SetPinValue+0x6e>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	c9 f0       	breq	.+50     	; 0x390 <DIO_SetPinValue+0x9e>
 35e:	08 95       	ret
			{
				case PORT_B: CLEAR_BIT(PORTB_REG,pin_ID) ; break;
 360:	25 b1       	in	r18, 0x05	; 5
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_SetPinValue+0x7a>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_SetPinValue+0x76>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	85 b9       	out	0x05, r24	; 5
 376:	08 95       	ret
				case PORT_C: CLEAR_BIT(PORTC_REG,pin_ID) ; break;
 378:	28 b1       	in	r18, 0x08	; 8
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_SetPinValue+0x92>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_SetPinValue+0x8e>
 388:	80 95       	com	r24
 38a:	82 23       	and	r24, r18
 38c:	88 b9       	out	0x08, r24	; 8
 38e:	08 95       	ret
				case PORT_D: CLEAR_BIT(PORTD_REG,pin_ID) ; break;
 390:	2b b1       	in	r18, 0x0b	; 11
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_SetPinValue+0xaa>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_SetPinValue+0xa6>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	8b b9       	out	0x0b, r24	; 11
 3a6:	08 95       	ret

000003a8 <INTERRUPT_INIT>:

#include "INTERRUPT.h"

void INTERRUPT_INIT(void)
{  
	SET_BIT(PCMSK2,PCINT18);
 3a8:	ed e6       	ldi	r30, 0x6D	; 109
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	84 60       	ori	r24, 0x04	; 4
 3b0:	80 83       	st	Z, r24
	SET_BIT(PCMSK2,PCINT19);
 3b2:	80 81       	ld	r24, Z
 3b4:	88 60       	ori	r24, 0x08	; 8
 3b6:	80 83       	st	Z, r24
	SET_BIT(PCICR,PCIE2);	
 3b8:	e8 e6       	ldi	r30, 0x68	; 104
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	84 60       	ori	r24, 0x04	; 4
 3c0:	80 83       	st	Z, r24
	sei();
 3c2:	78 94       	sei
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
